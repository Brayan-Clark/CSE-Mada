---
import type { CollectionEntry } from 'astro:content';

interface Props {
  posts: CollectionEntry<'blog'>[];
  showDescription?: boolean;
  showImage?: boolean;
  showReadMore?: boolean;
  limit?: number;
}

const { 
  posts, 
  showDescription = true, 
  showImage = true, 
  showReadMore = true,
  limit
} = Astro.props;

// Limiter le nombre d'articles si nécessaire
const displayedPosts = limit ? posts.slice(0, limit) : posts;
---

<div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
  {displayedPosts.map((post) => (
    <article 
      class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-shadow duration-300 flex flex-col h-full"
    >
      {showImage && post.data.image && (
        <div class="h-48 overflow-hidden">
          <img 
            src={post.data.image} 
            alt={post.data.title}
            class="w-full h-full object-cover hover:scale-105 transition-transform duration-500"
            loading="lazy"
          />
        </div>
      )}
      
      <div class="p-6 flex-1 flex flex-col">
        <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-2">
          <time datetime={new Date(post.data.pubDate).toISOString()}>
            {new Date(post.data.pubDate).toLocaleDateString('fr-FR', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </time>
          {post.data.updatedDate && (
            <span class="ml-2 text-xs bg-gray-100 dark:bg-gray-700 px-2 py-0.5 rounded-full">
              Mis à jour
            </span>
          )}
        </div>
        
        <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2">
          {post.data.title}
        </h2>
        
        {showDescription && post.data.description && (
          <p class="text-gray-600 dark:text-gray-300 mb-4 flex-1">
            {post.data.description}
          </p>
        )}
        
        {post.data.tags && post.data.tags.length > 0 && (
          <div class="flex flex-wrap gap-2 mt-4">
            {post.data.tags.map((tag: string) => (
              <span class="text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-100 px-2 py-1 rounded-full">
                {tag}
              </span>
            ))}
          </div>
        )}
        
        <div class="mt-auto pt-4 border-t border-gray-200 dark:border-gray-700 flex justify-between items-center">
          <span class="text-sm font-medium text-gray-700 dark:text-gray-300">
            Par {post.data.author}
          </span>
          
          {showReadMore && (
            <a 
              href={`/CSE-Mada/blog/${post.slug}`}
              class="mt-4 inline-flex items-center text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 font-medium"
            >
              Lire la suite
              <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          )}
        </div>
      </div>
    </article>
  ))}
</div>

<style>
  article {
    transition: all 0.3s ease;
  }
  
  article:hover {
    transform: translateY(-4px);
  }
  
  /* Animation pour les tags */
  span[class*="bg-green"] {
    transition: all 0.2s ease;
  }
  
  span[class*="bg-green"]:hover {
    transform: scale(1.05);
  }
</style>
